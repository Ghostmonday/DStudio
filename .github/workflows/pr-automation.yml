name: PR Automation & Management

on:
  workflow_dispatch:
    inputs:
      pr_title:
        description: 'PR Title'
        required: true
        default: 'AutoPR: Pipeline Upgrade'
      pr_description:
        description: 'PR Description'
        required: true
        default: 'Automated PR for pipeline upgrades'
      target_branch:
        description: 'Target Branch'
        required: true
        default: 'main'
      source_branch:
        description: 'Source Branch'
        required: true
        default: 'pipeline-upgrade-replacement'
      auto_merge:
        description: 'Auto-merge after approval'
        type: boolean
        default: false
  push:
    branches: [ 'pr/*' ]
    paths: [ 'PR_*.md', 'pr.ps1' ]
  pull_request:
    types: [opened, synchronize, closed, approved, review_requested]

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create-pr:
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"

      - name: Create PR
        run: |
          gh pr create \
            --title "${{ github.event.inputs.pr_title }}" \
            --body "${{ github.event.inputs.pr_description }}" \
            --base "${{ github.event.inputs.target_branch }}" \
            --head "${{ github.event.inputs.source_branch }}" \
            --label "automation,ci-generated" \
            --assignee "@me"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  monitor-pr:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Monitor PR Status
        run: |
          echo "PR Status: ${{ github.event.pull_request.state }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR URL: ${{ github.event.pull_request.html_url }}"
          
          # Update PR status in documentation
          cat > PR_STATUS.md << EOF
          # Current PR Status
          
          **PR Number:** #${{ github.event.pull_request.number }}
          **Title:** ${{ github.event.pull_request.title }}
          **Status:** ${{ github.event.pull_request.state }}
          **URL:** ${{ github.event.pull_request.html_url }}
          **Created:** ${{ github.event.pull_request.created_at }}
          **Updated:** ${{ github.event.pull_request.updated_at }}
          
          ## Actions Taken
          - [x] PR created via automation
          - [x] Labels applied
          - [x] Status monitoring active
          
          ## Next Steps
          - [ ] Code review
          - [ ] Testing
          - [ ] Approval
          - [ ] Merge (if auto-merge enabled)
          EOF

      - name: Commit Status Update
        if: github.event.pull_request.state == 'opened'
        run: |
          git add PR_STATUS.md
          git commit -m "Update PR status: #${{ github.event.pull_request.number }}"
          git push

  auto-merge:
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == false && github.event.pull_request.approved == true
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Auto-merge PR
        run: |
          gh pr merge ${{ github.event.pull_request.number }} --merge --delete-branch
          echo "PR #${{ github.event.pull_request.number }} merged successfully"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-documentation:
    if: github.event_name == 'push' && contains(github.event.head_commit.modified, 'PR_*.md')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update PR Documentation
        run: |
          # Get latest PR information
          LATEST_PR=$(gh pr list --state all --limit 1 --json number,title,state,url)
          
          cat > PR_LIVE_STATUS.md << EOF
          # Live PR Status - $(date)
          
          ## Latest PR Information
          \`\`\`json
          $LATEST_PR
          \`\`\`
          
          ## Repository Status
          - **Repository:** ${{ github.repository }}
          - **Default Branch:** ${{ github.ref_name }}
          - **Last Updated:** $(date -u)
          
          ## Active PRs
          \`\`\`
          $(gh pr list --state open --json number,title,state,url)
          \`\`\`
          
          ## Recent Activity
          \`\`\`
          $(gh pr list --state all --limit 5 --json number,title,state,url,createdAt)
          \`\`\`
          EOF

      - name: Commit Documentation Update
        run: |
          git add PR_LIVE_STATUS.md
          git commit -m "Update live PR status documentation"
          git push
